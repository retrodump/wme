// This file is part of Wintermute Engine
// For conditions of distribution and use, see copyright notice in license.txt

#include "Wme.h"
#include "Uuid.h"


namespace Wme
{


//////////////////////////////////////////////////////////////////////////
Uuid::Uuid()
{
	Clear();
}

//////////////////////////////////////////////////////////////////////////
Uuid::Uuid(const Uuid& id)
{
	Clone(id);
}

//////////////////////////////////////////////////////////////////////////
Uuid::Uuid(const byte buffer[16])
{
	FromBinary(buffer);
}

//////////////////////////////////////////////////////////////////////////
Uuid::Uuid(const WideString& str)
{
	ParseString(str);
}

//////////////////////////////////////////////////////////////////////////
Uuid::Uuid(UuidType Type)
{
	Generate();
}

//////////////////////////////////////////////////////////////////////////
Uuid::~Uuid()
{
}

//////////////////////////////////////////////////////////////////////////
Uuid& Uuid::operator= (const Uuid& id)
{
	if (this == &id) return *this;
	Clone(id);
	return *this;
}

//////////////////////////////////////////////////////////////////////////
bool Uuid::operator== (const Uuid& id)
{
	return (Compare(id) == 0);
}

//////////////////////////////////////////////////////////////////////////
bool Uuid::operator!= (const Uuid& id)
{
	return (Compare(id) != 0);
}

//////////////////////////////////////////////////////////////////////////
void Uuid::Clone(const Uuid& id)
{
	m_Uuid = id.m_Uuid;
}

//////////////////////////////////////////////////////////////////////////
int Uuid::Compare(const Uuid& id)
{

	if (m_Uuid == id.m_Uuid) return 0;
	else return 1;
}

//////////////////////////////////////////////////////////////////////////
void Uuid::Clear()
{
	m_Uuid = boost::uuids::nil_uuid();
}

//////////////////////////////////////////////////////////////////////////
void Uuid::Generate()
{
	boost::uuids::basic_random_generator<boost::mt19937> gen;
	m_Uuid = gen();
}

//////////////////////////////////////////////////////////////////////////
bool Uuid::IsEmpty()
{
	return m_Uuid.is_nil();
}

//////////////////////////////////////////////////////////////////////////
WideString Uuid::ToString() const
{
	std::wstringstream ss;
	ss << m_Uuid;

	return ss.str();
}

//////////////////////////////////////////////////////////////////////////
bool Uuid::ParseString(const WideString& str)
{
	try
	{
		boost::uuids::string_generator gen;
		m_Uuid = gen(str);
		return true;
	}
	catch (...)
	{
		Clear();
		return false;
	}
}

//////////////////////////////////////////////////////////////////////////
void Uuid::GetBinary(byte buffer[16]) const
{
	memcpy(buffer, m_Uuid.data, 16);
}

//////////////////////////////////////////////////////////////////////////
void Uuid::FromBinary(const byte buffer[16])
{
	memcpy(&m_Uuid, buffer, 16);

}


} // namespace Wme
